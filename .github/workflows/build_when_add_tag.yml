name: Android CI (tag)

on:
  push:
    tags: ["v*"]
    # branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "zulu"
          cache: gradle

      - name: Get Git commit hash
        id: git_commit_hash
        run: echo "GIT_COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get Repository Info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
          echo "GIT_REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "GIT_REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.22"

      - name: Install gomobile
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init

      - name: Build xyropencc
        run: |
          cd xyropencc
          chmod +x build.sh
          ./build.sh
          cd ..

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-universal-release
          path: app/build/outputs/apk/release/app-universal-release.apk

      - name: Create GitHub Release and Upload APK
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v') # Ensure this step runs only for tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          # body: "Release ${{ github.ref_name }}. Built from commit ${{ env.GIT_COMMIT_HASH }}."
          prerelease: false
          body_path: CHANGELOG.md
          files: |
            app/build/outputs/apk/release/app-arm64-v8a-release.apk 
            app/build/outputs/apk/release/app-armeabi-v7a-release.apk  
            app/build/outputs/apk/release/app-universal-release.apk
            app/build/outputs/apk/release/app-x86_64-release.apk
            app/build/outputs/apk/release/app-x86-release.apk

      - name: Create Gitee release
        run: |
          RELEASE_ID=$(curl -X POST --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/${{ env.GIT_REPO_OWNER }}/${{ env.GIT_REPO_NAME }}/releases' -d '{"access_token":"${{ secrets.GITEE_TOKEN }}","tag_name":"${{ github.ref_name }}","name":"Release ${{ github.ref_name }} ","body":"${{ github.ref_name }}. Built from commit ${{ env.GIT_COMMIT_HASH }}. \n https://github.com/${{ env.GIT_REPO_OWNER }}/${{ env.GIT_REPO_NAME }}/releases/tag/${{ github.ref_name }}","target_commitish":"main"}' | jq '.id')
          echo "GITEE_RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
          echo "Release ID: $RELEASE_ID"

      - name: Upload APK to Gitee
        run: |
          echo "Release ID: ${{ env.GITEE_RELEASE_ID }}"
          curl -X POST "https://gitee.com/api/v5/repos/${{ env.GIT_REPO_OWNER }}/${{ env.GIT_REPO_NAME }}/releases/${{ env.GITEE_RELEASE_ID }}/attach_files" \
          -H "Authorization: Bearer ${{ secrets.GITEE_TOKEN }}" \
          -F "file=@app/build/outputs/apk/release/app-universal-release.apk"
